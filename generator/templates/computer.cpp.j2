#include "canlib_{{ computer.name }}.hpp"
#include "bus.hpp"
#include "drivers/inc/{{ system.architecture['name'][computer.architecture].family }}.hpp"

using namespace CANlib;

{% if testing %}
using namespace {{ computer.name }};
{% endif %}

{% if testing %}
Raw_Bus_T CANlib::{{ computer.name }}::GetRawBus(Bus_Names_T bus) {
{% else %}
Raw_Bus_T GetRawBus(Bus_Names_T bus) {
{% endif %}
  switch (bus) {
{%- for busnm, rawnm in computer.participation['name']['can'].mapping.items() %}
    case Bus_Names_T::{{ busnm }}:
      return Raw_Bus_T::{{ rawnm }};
{%- endfor %}
    default:
      return Raw_Bus_T::INVALID_BUS;
  }
}

{% if testing %}
Bus_Names_T CANlib::{{ computer.name }}::GetBusName(Raw_Bus_T bus) {
{% else %}
Bus_Names_T GetBusName(Raw_Bus_T bus) {
{% endif %}
	switch (bus) {
{%- for busnm, rawnm in computer.participation['name']['can'].mapping.items() %}
    case Raw_Bus_T::{{ rawnm }}:
      return Bus_Names_T::{{ busnm }};
{%- endfor %}
    default:
      return Bus_Names_T::INVALID_NAME;
  }
}

{%- for busnm, rawnm in computer.participation['name']['can'].mapping.items() %}

void {{busnm}}::update_can() {
  Frame frame;
  ReadFrame(frame, Raw_Bus_T::{{ rawnm }});
  HandleFrame(Bus_Names_T::{{busnm}}, frame);
}
{%- endfor %}

void update_can(void) {
{%- for busnm in computer.participation['name']['can'].subscribe.keys() %}
  {{ busnm }}::update_can();
{%- endfor %}
}
