{%- macro struct_declarations(bus, msg, msg_name=msg.name) -%}
{%- if msg.frame is defined %}
    namespace {{msg_name}} {
        {% for sub_frame in msg.frame %}
            {{ struct_declarations(bus, sub_frame) }}
        {% endfor %}
    } // {{msg_name}}

{% else %}
    {{msg_name}}_T {{msg_name}}_input;
{% endif %}
{%- endmacro -%}

{%- macro get_messages(msg, msg_names) -%}
{%- if msg.frame is defined -%}
    nullptr,
    {%- for sub_frame in msg.frame -%}
        {{ get_messages(sub_frame, msg_names + [sub_frame.name]) }}
    {%- endfor -%}
{%- else -%}
     &{{"::".join(msg_names)}}_input,
{%- endif -%}
{%- endmacro -%}

#pragma once

#include <stdint.h>
#include <stdbool.h>
#include <chrono>
#include "static.hpp"
#include "bus.hpp"
#include "structs.hpp"

using namespace CANlib;

{%- for bus in can.bus %}

    namespace {{ bus.name }} {

        {% for msg in bus.frame -%}
            {{ struct_declarations(bus, msg) }}
        {%- endfor -%}

        Message_T* messages[] = {
            {%- for msg in bus.frame -%}
                {{ get_messages(msg, [msg.name]) }}
            {%- endfor -%}
        };

    } // {{ bus.name }}

{% endfor %}

Message_T** messages[static_cast<uint32_t>(Bus_Names_T::INVALID_NAME)] = {
{%- for bus in can.bus -%}
{{bus.name}}::messages,
{%- endfor -%}
};


