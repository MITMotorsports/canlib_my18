{%- macro struct_declarations(bus, msg, constr_name, msg_name=msg.name) -%}
{%- if msg.frame is defined %}
    namespace {{msg_name}} {
        {% for sub_frame in msg.frame %}
            {{ struct_declarations(bus, sub_frame, constr_name + "_" + sub_frame.name) }}
        {% endfor %}
    } // {{msg_name}}

{% else %}
    struct {{msg_name}}_T : public Bus_T {
        {{msg_name}}_T() 
            : name_({{ constr_name }}) {}
        ~{{msg_name}}_T() = default;
        Frame unpack() override;
        void pack(Frame&) override;
        {% for atom in msg.atom %}
            {%- if atom.type.isenum() -%}
                typedef enum {                                                                 
                 {%- for enum in atom.type.enum -%}
                     {%- if enum.name == 'NUM_FIELDS' -%}                   
                        {%- raise "Enum name for {{ atom.name }} cannot be NUM_FIELDS" -%}
                       {%- else %}                                                 
                          {{ enum.name }} = {{ enum.value }},
                         {%- endif -%}
                      {%- endfor %}
                     NUM_FIELDS = {{ atom.type.enum | length }}
                 } {{ atom.name }}_T;
            {% endif -%}
        {% endfor %}
        {%- for atom in msg.atom %}
            {%- if atom.type.isenum() %}
                {{ atom.name }}_T {{ atom.name }};
            {%- else %}
                {{ atom.type.ctype() }} {{ atom.name }};
            {%- endif -%}
        {% endfor %}
    }
{% endif %}
{%- endmacro -%}

#pragma once

#include <stdint.h>
#include <stdbool.h>

#include "enum_atom.h"

namespace CANlib {

struct Bus_T {
    typedef enum {
        {%- for bus in can.bus %}
        {{ bus.name }},
        {%- endfor %}
    } Bus_Names_T;
    const Bus_Names_T name_;
    virtual Frame unpack() = 0;
    virtual void pack(Frame&) = 0;
    void send() {
        Frame frame;
        pack(frame);
        TransmitFrame(frame, name_);
    };
}

{%- for bus in can.bus %}

    namespace {{ bus.name }} {

        {% for msg in bus.frame -%}
            {{ struct_declarations(bus, msg, bus.name + "::" + msg.name) }}
        {%- endfor -%}

    } // {{ bus.name }}

{% endfor %}

void to_bitstring(uint8_t in[], uint64_t *out);

} // CANlib


